/**
 * OpenALPR Cloud API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.openalpr.api;

import com.sun.jersey.api.client.GenericType;

import com.openalpr.api.invoker.ApiException;
import com.openalpr.api.invoker.ApiClient;
import com.openalpr.api.invoker.Configuration;
import com.openalpr.api.models.*;
import com.openalpr.api.invoker.Pair;

import com.openalpr.api.models.InlineResponse200;
import com.openalpr.api.models.InlineResponse400;
import java.io.File;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-24T16:12:49.437-05:00")
public class DefaultApi {
  private ApiClient apiClient;

  public DefaultApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
   * @param imageBytes The image file that you wish to analyze encoded in base64  (required)
   * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
   * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
   * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
   * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
   * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
   * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
   * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
   * @return InlineResponse200
   * @throws ApiException if fails to make API call
   */
  public InlineResponse200 recognizeBytes(String imageBytes, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp) throws ApiException {
    Object localVarPostBody = imageBytes;
    
    // verify the required parameter 'imageBytes' is set
    if (imageBytes == null) {
      throw new ApiException(400, "Missing the required parameter 'imageBytes' when calling recognizeBytes");
    }
    
    // verify the required parameter 'secretKey' is set
    if (secretKey == null) {
      throw new ApiException(400, "Missing the required parameter 'secretKey' when calling recognizeBytes");
    }
    
    // verify the required parameter 'country' is set
    if (country == null) {
      throw new ApiException(400, "Missing the required parameter 'country' when calling recognizeBytes");
    }
    
    // create path and map variables
    String localVarPath = "/recognize_bytes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "secret_key", secretKey));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "recognize_vehicle", recognizeVehicle));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "country", country));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "return_image", returnImage));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "topn", topn));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "prewarp", prewarp));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<InlineResponse200> localVarReturnType = new GenericType<InlineResponse200>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
   * @param image The image file that you wish to analyze  (required)
   * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
   * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
   * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
   * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
   * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
   * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
   * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
   * @return InlineResponse200
   * @throws ApiException if fails to make API call
   */
  public InlineResponse200 recognizeFile(File image, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'image' is set
    if (image == null) {
      throw new ApiException(400, "Missing the required parameter 'image' when calling recognizeFile");
    }
    
    // verify the required parameter 'secretKey' is set
    if (secretKey == null) {
      throw new ApiException(400, "Missing the required parameter 'secretKey' when calling recognizeFile");
    }
    
    // verify the required parameter 'country' is set
    if (country == null) {
      throw new ApiException(400, "Missing the required parameter 'country' when calling recognizeFile");
    }
    
    // create path and map variables
    String localVarPath = "/recognize".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "secret_key", secretKey));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "recognize_vehicle", recognizeVehicle));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "country", country));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "return_image", returnImage));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "topn", topn));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "prewarp", prewarp));

    
    if (image != null)
      localVarFormParams.put("image", image);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<InlineResponse200> localVarReturnType = new GenericType<InlineResponse200>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
   * @param imageUrl A URL to an image that you wish to analyze  (required)
   * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
   * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
   * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
   * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
   * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
   * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
   * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
   * @return InlineResponse200
   * @throws ApiException if fails to make API call
   */
  public InlineResponse200 recognizeUrl(String imageUrl, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'imageUrl' is set
    if (imageUrl == null) {
      throw new ApiException(400, "Missing the required parameter 'imageUrl' when calling recognizeUrl");
    }
    
    // verify the required parameter 'secretKey' is set
    if (secretKey == null) {
      throw new ApiException(400, "Missing the required parameter 'secretKey' when calling recognizeUrl");
    }
    
    // verify the required parameter 'country' is set
    if (country == null) {
      throw new ApiException(400, "Missing the required parameter 'country' when calling recognizeUrl");
    }
    
    // create path and map variables
    String localVarPath = "/recognize_url".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "image_url", imageUrl));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "secret_key", secretKey));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "recognize_vehicle", recognizeVehicle));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "country", country));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "return_image", returnImage));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "topn", topn));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "prewarp", prewarp));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<InlineResponse200> localVarReturnType = new GenericType<InlineResponse200>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
